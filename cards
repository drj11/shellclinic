# backquote

    $(lsb_release -c -s)

Korn's syntax for backquoting commands:
standard for ages; every sane shell supports it.
It nests, and quoting won't drive you insane.

# errors

    set -e

Shell has no exceptions to speak of;
it's easy to write a script that unwisely
ignores errors in commands.
Is it better for a script to simply exit?

# string manipulation

    ${name%.*}

Some string manipulations can be done in shell,
without having to invoke a subprocess.

# printf

    printf '\x1b[32;1%sm\n' Hello World

It's great, and it's standard since forever.

# Prompt

    PS1='$(whoami)@$(hostname) $(pwd)$ '

# Recursive functions

    fact () { 
      if [ "$1" = 0 ]; then
        echo ${2-1}
      else
        fact $(($1-1)) $((${2-1}*$1))
      fi
    }

Functions are great!

# Random passwords

    </dev/urandom dd bs=1 count=8 2>&- |
      od -t x1 -An | tr -d ' '


# args or input

    ${@:-$(cat)}

from @holman

# getopts is for people who can't write loops

    while [ $# != 0 ]
    do
      case $1 in
        (-h|--help) usage; exit 0;;
        (-v|--verbose) verbose=true; shift;;
        (-*) usage 1>&2; exit 4;;
        (*) break;;
      esac
    done

Traditional native folklore.

# Joining together arguments

    glue()(IFS=$1;shift;echo "$*")

Hilariously obscure use of $* and also
function definition using subshell brackets.

# no output

    grep drj /etc/passwd > /dev/null 2>&1

The order of redirects matters.

# pipe stdout and stderr

    make 2>&1 | tee out

# redirect forever

    exec >> /var/log/foo 2>&1

exec with no command makes a permanent
redirection for the rest of the shell script.

# find within find

    find $(find / -name etc) -type f

Finds all files within any directory called etc.

# Split off

    IFS=

Word splitting is very rarely useful, and often can
be misleading and dangerous.
Consider switching it off at the
beginning of a script.

# why used head?

    cat /etc/passwd | sed 9q

Kernighan and Pike pointed out in their 1983 classic
"The UNIX Programming Environment" that sed can be
used to get the first N lines of a file.  So why would
anyone write a utility to do just that and only that?

# PWD

    $(pwd)

# The true working directory

    pwd
    env pwd

# is it unset or zero-length

    if [ -z $1 ]    # nearly works
    if [ -z "$1" ]  # really works
    if [ ! "$1" ]   # Also really works, but more obscure

The tricky case is not when $1 is "" but when it is
"= -z" (and others).

# inequality

    if ! [ "$1" = thing ]
    if [ ! "$1" = thing ]
    if [ "$1" != thing ]

Pretty much all the same.  Which is better?

# sourcing is a builtin

    [ -r config ] &&
    . config

The guard to check the file exists is necessary:
otherwise the . command will exit the script!

# twiddles

    cd
    cd ~
    cd ~dgk
    cd ~-
    printf ~-

All sorts of fun to be had with ~.
It doesn't have to be used with cd.
